name: "Check if version is published on NuGet"
author: "Arbeidstilsynet"
description: "Checks if the given package version is already published on a given source"

inputs:
  name:
    description: "The package name"
    required: true
  version:
    description: "The package version"
    required: true
  source-feed:
    description: "The source feed to check against"
    default: "nuget.org"
  dotnet-version:
    description: "The version of dotnet to use"
    default: "8.0.x"

outputs:
  published:
    description: "true if the version is already published, false otherwise"
    value: ${{ steps.nuget_version_check.outputs.published }}
  last_version:
    description: "The last version published"
    value: ${{ steps.nuget_version_check.outputs.last_version }}
  last_prerelease_version:
    description: "The last prerelease version published"
    value: ${{ steps.nuget_version_check.outputs.last_prerelease_version }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
    - name: Check if version is already published on NuGet
      id: nuget_version_check
      shell: bash
      run: |
        NAME="${{ inputs.name }}"
        VERSION="${{ inputs.version }}"
        SOURCE_FEED="${{ inputs.source-feed }}"
        SEARCH=$(dotnet package search "$NAME" --format json)
        echo "$SEARCH"

        # Check if any version matches
        FOUND=$(echo "$SEARCH" | jq --arg SOURCE_FEED "$SOURCE_FEED" --arg VERSION "$VERSION" '.searchResult[] | select(.sourceName==$SOURCE_FEED) | .packages[] | .versions[] | select(.version == $VERSION) | .version' | tr -d '"')
        # Get all versions (sorted descending)
        ALL_VERSIONS=$(echo "$SEARCH" | jq --arg SOURCE_FEED "$SOURCE_FEED" '.searchResult[] | select(.sourceName==$SOURCE_FEED) | .packages[] | .versions[].version' | tr -d '"' | sort -Vr)
        LAST_VERSION=$(echo "$ALL_VERSIONS" | grep -v '-' | head -n 1)
        LAST_PRERELEASE_VERSION=$(echo "$ALL_VERSIONS" | grep '-' | head -n 1)

        echo "last_version=$LAST_VERSION" >> $GITHUB_OUTPUT
        echo "last_prerelease_version=$LAST_PRERELEASE_VERSION" >> $GITHUB_OUTPUT

        if [ "$FOUND" = "$VERSION" ]; then
          echo "The version ($FOUND) for $NAME is already published in the $SOURCE_FEED feed."
          echo "published=true" >> $GITHUB_OUTPUT
        else
          echo "Last version published for $NAME in the $SOURCE_FEED feed was '$LAST_VERSION'. The given version $VERSION is not the same."
          echo "published=false" >> $GITHUB_OUTPUT
        fi
